const Post = require("../model/post");
const Comment = require("../model/comment");
const User = require("../model/user");
const bcrypt = require("bcryptjs");
const sgMail = require('@sendgrid/mail')
const jwt = require("jsonwebtoken");
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

const handleError = (err) => {
  const error = new Error(err);
  error.httpStatusCode = 500;
  return next(error);
};

exports.postLogin = (req, res, next) => {
  const email = req.body.email;
  const password = req.body.password;

  User.findOne(email)
    .then((user) => {
      if (!user) {
        res.status(401).json({
          user: false,
          message: "Lodin Attempt failed",
        });
      }
      bcrypt.compare(user.password, password).then((doMatch) => {
        if (!doMatch) {
          res.status(401).json({
            accessToken: null,
            user: null,
            message: "Something is not correct, try again!",
          });
        }
        const token = jwt.sign(
          {
            id: user._id.toString(),
          },
          process.env.SECRET,
          {
            expiresIn: 84600,
          }
        );

        res.status(200).json({
          user: {
            userId: user._id.toString(),
            firstName: user.firstname,
            lastName: user.lastname,
            userImg: userImg ? userImg : null,
          },
          message: "Login Successful",
          accessToken: token,
        });
      });
    })
    .catch((err) => {
      handleError(err);
    });
};

exports.postSignup = (req, res, next) => {
  const { firstname, lastname, email, password, confirmPassword } = req.body;

  User.findOne(email)
    .then((doMatch) => {
      if (doMatch) {
        return res.status(409).json({
          user: null,
          accessToken: null,
          message: "Email already used",
        });
      }
      const hashedPassword = bcrypt.hashSync(password, 12);
      const newUser = new User({
        firstname: firstname.toLowerCase(),
        lastname: lastname.toLowerCase(),
        email: email.toLowerCase(),
        password: hashedPassword,
      });
      return newUser.save();
    })
    .then((result) => {
      const msg = {
        to: email.toLowerCase(),
        from: "miniapp@testemail.com",
        subject: "Successful Registration",
        text: "I'm Sam the Unknown",
        template: process.env.TemplateId,
        html: "<p>Welcome, your registration was succesful</p>",
      };
      return sgMail.send(msg).then(() => console.log("Email sent".italic.cyan));
    })
    .catch((err) => {
      handleError(err);
    });
};
